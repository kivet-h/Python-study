"""
    数据类型和变量
"""

# 在Python中，能够直接处理的数据类型有以下几种：

# ================================================== 数据类型 ==================================================
# 1. 整数
# Python可以处理任意大小的整数，包括负整数。
# 如：-100，-1，0，1，100

# 由于计算机使用的是二进制，所以有时候也能使用十六进制来表示整数。
# 十六进制：使用0x前缀和0-9，a-f表示。
# 如：0xff00、0xa5b4c3d2

# 对应很大的数，如10000000000，有时候很难数清楚有多少个0。
# Python中允许在数字中间以`_`进行分割，如上面数字，可以写成：10_000_000_000
# 十六进制数也可以写成如：0xa1b2_c3d4



# 2. 浮点数
# 扩展：
# 浮点数也就是小数，之所以被称为浮点数，是因为按照科学计数法表示时，一个浮点数的小数点是可变的。
# 如：1.23x10的9次方 和 12.3x10的8次方 是完全相等的。

# 浮点数用数学的写法，如：1.23，-4.56
# 但是对于一些很大或很小的浮点数，一般就需要使用科学计数法表示了：把10用e表示。
# 如 1.23×10的9次方 就是 1.23e9，或者12.3e8
# 0.000012可以写成1.2e-5

# 注意：整数和浮点数在计算机内部的存储方式是不一样的。
# 整数运算永远是精确的，即使是除法也算是精确的。（下面会讲）
# 但是浮点数运算则可能会有四舍五入的误差。

# 为什么整数的除法也是精确的？
# 在Python中，除法有两种表示方式，
# a. 一种是使用/
# print(10 / 3) # ==> 3.3333333333333335
# print(9 / 3) # ==> 3.0
# 可以看到，这种除法，即使能整除，其结果都是浮点数

# b. 还有一种除法是//，被称之为地板除，其结果必为整数
# print(10 // 3) # ==》 3
# 地板除//的除法，只取结果的整数部分，所以其结果永远都是整数，即使除不尽。
# 要想精确的除法，就使用/

# 求余运算
# print(10 % 3) # ==》 1



# 3. 字符串
# 在Python中，字符串是以单引号`'`或双引号`"`括起来的任意文本。
# 如：'a'， "I'm ok"， 'I\'m \"OK\"!'

# 对于：'I\'m \"OK\"!'
# 使用转义字符\进行转义，即：I'm "OK"!

# 转义字符可以转义很多字符，如：
# \n 表示换行
# \t 表示制表符
# \\ 表示转义自身，即字符\

# 如果字符串中需要加很多的转义字符，Python中允许使用 r'' 来表示''内部的字符串默认不转义
# print('\\\t\\') # ==> \	\
# print(r'\\\t\\') # \\\t\\

# 如果字符串内部需要换行，用\n写在一行中不好阅读，为了简化，Python允许使用'''...'''的格式来表示多行内容。
# print('''abc
# def
# ghi
# 123
# ''')
# ===》 output：
# abc
# def
# ghi
# 123

# 多行字符串'''...''' 也可以结合r''一起使用，如
# print(r'''hello,\n
# world''')
# ===》 output：
# hello,\n
# world



# 4. 布尔值
# 布尔值只有True和False，注意首字母是大写的。
# print(True) # ==> True
# print(False) # ==> False
# print(3 > 5) # ==> False
# print(3 < 5) # ==> True

# 布尔值可以用 and、or、not进行运算
# and运算是与运算，只有所有都为True，结果才是True
# or运算是或运算，只要其中有一个为True，结果就是True
# not运算是非运算，它是一个单目运算符，把True变成False，False变成True




# 5. 空值
# 在Python中，还有一个特殊的值，用None表示。
# None不能理解成0，0是有意义的，而None是一个特殊的空值




# 6. Python中，还有列表，字典等多种数据类型，甚至还允许场景自定义数据类型。这里先说几种常见基础的类型，剩下的后面再说




# ================================================== 变量 ==================================================
# 1. 变量定义
# 变量在程序中用一个变量名表示，变量名必须是大小写英文、数字和下划线_ 的组合表示，且不能以数字开头。
# 如
# a = 1
# a_01 = 1




# 2. 赋值语句
# 在Python中，等号=是赋值语句，可以将任意数据类型赋值给变量，同一变量可以反复赋值，而且可以是不同类型的变量。
# a = 123 # a是整数
# print(a) # ==> 123
# a = 'ABC' # a变为字符串
# print(a) # ==> ABC

# 扩展
# 这种变量本身类型不固定的语言，被称之为动态语言。与之相对的，还有静态语言。
# 静态语言：即在定义变量时，必须指定变量类型，如果赋值的时候类型不匹配，就会报错。如：Java就是静态语言。
# 与静态语言相比，动态语言更加灵活，就是这个原因

# 变量在计算机内存中的表示
# a = 'A'
# b = a
# a = 'AA'
# print(a) # ==> AA
# print(b) # ==> A

# a = 'A'
# - 在内存中创建了字符串'A'
# - 在内存中创建了名为a的变量，并把它指向'A'

# b = a
# 解析器在内存中创建变量b，并把b指向a指向的字符串'A'

# a = 'AA'
# 解析器在内存中创建字符串'AA'，并且把变量a的指向改成指向'AA'，这个时候b并没有更改指向
# 所以最终打印出来a为AA，b为A



# ================================================== 常量 ==================================================
# 所谓常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，通常用全部大写的变量名表示常量
# PI = 3.14159265359

# 实际上，所谓的常亮其实仍然是一个变量，用全部大写的变量名表示常量只是一个习惯上的用法。

